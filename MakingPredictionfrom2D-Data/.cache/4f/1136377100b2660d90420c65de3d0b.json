{"id":"node_modules/vega-lite/build/src/spec/facet.js","dependencies":[{"name":"/home/bs278/Documents/Tensorflow-JS/MakingPredictionfrom2D-Data/node_modules/vega-lite/build/src/spec/facet.js.map","includedInParent":true,"mtime":1547364137000},{"name":"/home/bs278/Documents/Tensorflow-JS/MakingPredictionfrom2D-Data/package.json","includedInParent":true,"mtime":1558528544688},{"name":"/home/bs278/Documents/Tensorflow-JS/MakingPredictionfrom2D-Data/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":1547364136000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isFacetFieldDef = isFacetFieldDef;\nexports.isFacetSpec = isFacetSpec;\n\nfunction isFacetFieldDef(channelDef) {\n  return !!channelDef && !!channelDef['header'];\n}\n\nfunction isFacetSpec(spec) {\n  return spec['facet'] !== undefined;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":9,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":29,"column":16},"generated":{"line":9,"column":9}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":9,"column":24}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":29,"column":49},"generated":{"line":9,"column":25}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":9,"column":35}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":29,"column":84},"generated":{"line":9,"column":37}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":10,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":10,"column":9}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":10,"column":10}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":11},"generated":{"line":10,"column":11}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":10,"column":21}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":25},"generated":{"line":10,"column":25}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":26},"generated":{"line":10,"column":26}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":27},"generated":{"line":10,"column":27}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":37},"generated":{"line":10,"column":37}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":38},"generated":{"line":10,"column":38}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":37},"generated":{"line":10,"column":46}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":10,"column":47}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":31,"column":1},"generated":{"line":11,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":61,"column":6},"generated":{"line":13,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":61,"column":16},"generated":{"line":13,"column":9}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":61,"column":6},"generated":{"line":13,"column":20}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":61,"column":28},"generated":{"line":13,"column":21}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":61,"column":6},"generated":{"line":13,"column":25}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":61,"column":42},"generated":{"line":13,"column":27}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":62,"column":2},"generated":{"line":14,"column":0}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":62,"column":9},"generated":{"line":14,"column":9}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":62,"column":13},"generated":{"line":14,"column":13}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":62,"column":14},"generated":{"line":14,"column":14}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":62,"column":13},"generated":{"line":14,"column":21}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":62,"column":9},"generated":{"line":14,"column":22}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":62,"column":27},"generated":{"line":14,"column":27}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":62,"column":2},"generated":{"line":14,"column":36}},{"source":"../../../src/spec/facet.ts","name":null,"original":{"line":63,"column":1},"generated":{"line":15,"column":0}}],"sources":{"../../../src/spec/facet.ts":"import {ChannelDef, Field, FieldDef, RepeatRef, SortableFieldDef} from '../fielddef';\nimport {Header} from '../header';\nimport {Resolve} from '../resolve';\nimport {BaseSpec} from './base';\nimport {FacetMapping} from './facet';\nimport {GenericLayerSpec, NormalizedLayerSpec} from './layer';\nimport {GenericCompositionLayout} from './toplevel';\nimport {GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\nexport interface FacetFieldDef<F extends Field> extends SortableFieldDef<F> {\n  /**\n   * An object defining properties of a facet's header.\n   */\n  header?: Header;\n}\n\nexport interface FacetMapping<F extends Field> {\n  /**\n   * Vertical facets for trellis plots.\n   */\n  row?: FacetFieldDef<F>;\n\n  /**\n   * Horizontal facets for trellis plots.\n   */\n  column?: FacetFieldDef<F>;\n}\n\nexport function isFacetFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): channelDef is FacetFieldDef<F> {\n  return !!channelDef && !!channelDef['header'];\n}\n\n/**\n * Base interface for a facet specification.\n */\nexport interface GenericFacetSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    GenericCompositionLayout {\n  /**\n   * An object that describes mappings between `row` and `column` channels and their field definitions.\n   */\n  facet: FacetMapping<string | RepeatRef>;\n\n  /**\n   * A specification of the view that gets faceted.\n   */\n  spec: L | U;\n  // TODO: replace this with GenericSpec<U> once we support all cases;\n\n  /**\n   * Scale, axis, and legend resolutions for facets.\n   */\n  resolve?: Resolve;\n}\n\n/**\n * A facet specification without any shortcut / expansion syntax\n */\nexport type NormalizedFacetSpec = GenericFacetSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport function isFacetSpec(spec: BaseSpec): spec is GenericFacetSpec<any, any> {\n  return spec['facet'] !== undefined;\n}\n"},"lineCount":null}},"error":null,"hash":"5eb2c6ca3294837acdf9ab7f5514ebea","cacheData":{"env":{}}}