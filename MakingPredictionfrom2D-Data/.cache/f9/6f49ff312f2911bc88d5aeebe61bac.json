{"id":"node_modules/vega-lite/build/src/projection.js","dependencies":[{"name":"/home/bs278/Documents/Tensorflow-JS/MakingPredictionfrom2D-Data/node_modules/vega-lite/build/src/projection.js.map","includedInParent":true,"mtime":1547364137000},{"name":"/home/bs278/Documents/Tensorflow-JS/MakingPredictionfrom2D-Data/package.json","includedInParent":true,"mtime":1558528544688},{"name":"/home/bs278/Documents/Tensorflow-JS/MakingPredictionfrom2D-Data/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":1547364136000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PROJECTION_PROPERTIES = void 0;\nconst PROJECTION_PROPERTIES = ['type', 'clipAngle', 'clipExtent', 'center', 'rotate', 'precision', 'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];\nexports.PROJECTION_PROPERTIES = PROJECTION_PROPERTIES;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":7},"generated":{"line":7,"column":0}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":13},"generated":{"line":7,"column":6}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":34},"generated":{"line":7,"column":27}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":30}},{"source":"../../src/projection.ts","name":null,"original":{"line":60,"column":2},"generated":{"line":7,"column":31}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":37}},{"source":"../../src/projection.ts","name":null,"original":{"line":61,"column":2},"generated":{"line":7,"column":39}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":50}},{"source":"../../src/projection.ts","name":null,"original":{"line":62,"column":2},"generated":{"line":7,"column":52}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":64}},{"source":"../../src/projection.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":7,"column":66}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":74}},{"source":"../../src/projection.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":7,"column":76}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":84}},{"source":"../../src/projection.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":7,"column":86}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":97}},{"source":"../../src/projection.ts","name":null,"original":{"line":66,"column":2},"generated":{"line":7,"column":99}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":112}},{"source":"../../src/projection.ts","name":null,"original":{"line":67,"column":2},"generated":{"line":7,"column":114}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":124}},{"source":"../../src/projection.ts","name":null,"original":{"line":68,"column":2},"generated":{"line":7,"column":126}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":136}},{"source":"../../src/projection.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":7,"column":138}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":145}},{"source":"../../src/projection.ts","name":null,"original":{"line":70,"column":2},"generated":{"line":7,"column":147}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":157}},{"source":"../../src/projection.ts","name":null,"original":{"line":71,"column":2},"generated":{"line":7,"column":159}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":167}},{"source":"../../src/projection.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":7,"column":169}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":176}},{"source":"../../src/projection.ts","name":null,"original":{"line":73,"column":2},"generated":{"line":7,"column":178}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":187}},{"source":"../../src/projection.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":7,"column":189}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":7,"column":195}},{"source":"../../src/projection.ts","name":null,"original":{"line":59,"column":7},"generated":{"line":7,"column":196}}],"sources":{"../../src/projection.ts":"import {VgProjectionType} from './vega.schema';\n\nexport type ProjectionType = VgProjectionType;\n\nexport interface Projection {\n  /**\n   * The cartographic projection to use. This value is case-insensitive, for example `\"albers\"` and `\"Albers\"` indicate the same projection type. You can find all valid projection types [in the documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).\n   *\n   * __Default value:__ `mercator`\n   */\n  type?: ProjectionType;\n\n  /**\n   * Sets the projection’s clipping circle radius to the specified angle in degrees. If `null`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.\n   */\n  clipAngle?: number;\n\n  /**\n   * Sets the projection’s viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed.\n   */\n  clipExtent?: number[][];\n\n  /**\n   * Sets the projection’s center to the specified center, a two-element array of longitude and latitude in degrees.\n   *\n   * __Default value:__ `[0, 0]`\n   */\n  center?: number[];\n\n  /**\n   * Sets the projection’s three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)\n   *\n   * __Default value:__ `[0, 0, 0]`\n   */\n  rotate?: number[];\n\n  /**\n   * Sets the threshold for the projection’s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection’s current resampling precision which defaults to `√0.5 ≅ 0.70710…`.\n   */\n  precision?: string;\n\n  /* The following properties are all supported for specific types of projections. Consult the d3-geo-projection library for more information: https://github.com/d3/d3-geo-projection */\n  coefficient?: number;\n  distance?: number;\n  fraction?: number;\n  lobes?: number;\n  parallel?: number;\n  radius?: number;\n  ratio?: number;\n  spacing?: number;\n  tilt?: number;\n}\n\n/**\n * Any property of Projection can be in config\n */\nexport type ProjectionConfig = Projection;\n\nexport const PROJECTION_PROPERTIES: (keyof Projection)[] = [\n  'type',\n  'clipAngle',\n  'clipExtent',\n  'center',\n  'rotate',\n  'precision',\n  'coefficient',\n  'distance',\n  'fraction',\n  'lobes',\n  'parallel',\n  'radius',\n  'ratio',\n  'spacing',\n  'tilt'\n];\n"},"lineCount":null}},"error":null,"hash":"5ba238e0fc113ea50b31cd5ca5de6f00","cacheData":{"env":{}}}