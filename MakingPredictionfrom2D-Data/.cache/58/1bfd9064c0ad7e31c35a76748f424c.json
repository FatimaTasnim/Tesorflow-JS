{"id":"node_modules/vega-lite/build/src/spec/repeat.js","dependencies":[{"name":"/home/bs278/Documents/Tensorflow-JS/MakingPredictionfrom2D-Data/node_modules/vega-lite/build/src/spec/repeat.js.map","includedInParent":true,"mtime":1547364137000},{"name":"/home/bs278/Documents/Tensorflow-JS/MakingPredictionfrom2D-Data/package.json","includedInParent":true,"mtime":1558528544688},{"name":"/home/bs278/Documents/Tensorflow-JS/MakingPredictionfrom2D-Data/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":1547364136000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isRepeatSpec = isRepeatSpec;\n\nfunction isRepeatSpec(spec) {\n  return spec['repeat'] !== undefined;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":6},"generated":{"line":8,"column":0}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":16},"generated":{"line":8,"column":9}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":6},"generated":{"line":8,"column":21}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":29},"generated":{"line":8,"column":22}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":6},"generated":{"line":8,"column":26}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":45,"column":43},"generated":{"line":8,"column":28}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":46,"column":2},"generated":{"line":9,"column":0}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":46,"column":9},"generated":{"line":9,"column":9}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":46,"column":13},"generated":{"line":9,"column":13}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":46,"column":14},"generated":{"line":9,"column":14}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":46,"column":13},"generated":{"line":9,"column":22}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":46,"column":9},"generated":{"line":9,"column":23}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":46,"column":28},"generated":{"line":9,"column":28}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":46,"column":2},"generated":{"line":9,"column":37}},{"source":"../../../src/spec/repeat.ts","name":null,"original":{"line":47,"column":1},"generated":{"line":10,"column":0}}],"sources":{"../../../src/spec/repeat.ts":"import {Resolve} from '../resolve';\nimport {BaseSpec} from './base';\nimport {GenericSpec} from './index';\nimport {GenericLayerSpec, NormalizedLayerSpec} from './layer';\nimport {Repeat} from './repeat';\nimport {GenericCompositionLayout} from './toplevel';\nimport {GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\nexport interface Repeat {\n  /**\n   * Vertical repeated views.\n   */\n  row?: string[];\n\n  /**\n   * Horizontal repeated views.\n   */\n  column?: string[];\n}\n\n/**\n * Base interface for a repeat specification.\n */\nexport interface GenericRepeatSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    GenericCompositionLayout {\n  /**\n   * An object that describes what fields should be repeated into views that are laid out as a `row` or `column`.\n   */\n  repeat: Repeat;\n\n  spec: GenericSpec<U, L>;\n\n  /**\n   * Scale and legend resolutions for repeated charts.\n   */\n  resolve?: Resolve;\n}\n\n/**\n * A repeat specification without any shortcut/expansion syntax.\n */\nexport type NormalizedRepeatSpec = GenericRepeatSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport function isRepeatSpec(spec: BaseSpec): spec is GenericRepeatSpec<any, any> {\n  return spec['repeat'] !== undefined;\n}\n"},"lineCount":null}},"error":null,"hash":"1a39cfd1ec19ddb3e52cd36a2cb953a7","cacheData":{"env":{}}}