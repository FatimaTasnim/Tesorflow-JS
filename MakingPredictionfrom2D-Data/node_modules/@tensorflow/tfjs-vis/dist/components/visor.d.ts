import { Component } from 'preact';
import { SurfaceInfoStrict } from '../types';
interface VisorProps {
    surfaceList: SurfaceInfoStrict[];
    startOpen?: boolean;
    ref?: (r: VisorComponent) => void;
}
interface VisorState {
    isOpen: boolean;
    isFullscreen: boolean;
    activeTab: string | null;
    tabs: Set<string>;
}
export declare class VisorComponent extends Component<VisorProps, VisorState> {
    static render(parent: Element, replaceNode: Element, props: VisorProps): Element;
    private surfaces;
    constructor(props: VisorProps);
    close(): void;
    open(): void;
    toggle(): void;
    toggleFullScreen(): void;
    isOpen(): boolean;
    isFullscreen(): boolean;
    getSurface(label: string, tab: string): {
        container: HTMLElement;
        label: HTMLElement;
        drawArea: HTMLElement;
    };
    bindKeys(): void;
    unbindKeys(): void;
    private surfaceId;
    private setTabs;
    private getTabs;
    private registerSurface;
    private keyHandler;
    private setActiveTab;
    componentDidMount(): void;
    componentWillMount(): void;
    componentWillReceiveProps(nextProps: VisorProps): void;
    render(): JSX.Element;
}
export {};
