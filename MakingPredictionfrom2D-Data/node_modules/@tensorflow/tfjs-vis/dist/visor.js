"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const visor_1 = require("./components/visor");
let visorSingleton;
const DEFAULT_TAB = 'Visor';
const VISOR_CONTAINER_ID = 'tfjs-visor-container';
function visor() {
    if (typeof document === 'undefined') {
        throw new Error('No document defined. This library needs a browser/dom to work');
    }
    if (document.getElementById(VISOR_CONTAINER_ID) && visorSingleton != null) {
        return visorSingleton;
    }
    let visorEl = document.getElementById(VISOR_CONTAINER_ID);
    if (visorEl == null) {
        visorEl = document.createElement('div');
        visorEl.id = VISOR_CONTAINER_ID;
        document.body.appendChild(visorEl);
    }
    let renderRoot;
    function renderVisor(domNode, surfaceList) {
        let visorInstance;
        renderRoot = visor_1.VisorComponent.render(domNode, renderRoot, {
            ref: (r) => visorInstance = r,
            surfaceList: Array.from(surfaceList.values()),
        });
        return visorInstance;
    }
    const surfaceList = new Map();
    const visorComponentInstance = renderVisor(visorEl, surfaceList);
    visorSingleton =
        new Visor(visorComponentInstance, visorEl, surfaceList, renderVisor);
    return visorSingleton;
}
exports.visor = visor;
class Visor {
    constructor(visorComponent, visorEl, surfaceList, renderVisor) {
        this.visorComponent = visorComponent;
        this.el = visorEl;
        this.surfaceList = surfaceList;
        this.renderVisor = renderVisor;
    }
    surface(options) {
        const { name } = options;
        const tab = options.tab == null ? DEFAULT_TAB : options.tab;
        if (name == null ||
            !(typeof name === 'string' || name instanceof String)) {
            throw new Error('You must pass a config object with a \'name\' property to create or retrieve a surface');
        }
        const finalOptions = Object.assign({}, options, { tab });
        const key = `${name}-${tab}`;
        if (!this.surfaceList.has(key)) {
            this.surfaceList.set(key, finalOptions);
        }
        this.renderVisor(this.el, this.surfaceList);
        return this.visorComponent.getSurface(name, tab);
    }
    isFullscreen() {
        return this.visorComponent.isFullscreen();
    }
    isOpen() {
        return this.visorComponent.isOpen();
    }
    close() {
        return this.visorComponent.close();
    }
    open() {
        return this.visorComponent.open();
    }
    toggle() {
        return this.visorComponent.toggle();
    }
    toggleFullScreen() {
        return this.visorComponent.toggleFullScreen();
    }
    bindKeys() {
        return this.visorComponent.bindKeys();
    }
    unbindKeys() {
        return this.visorComponent.unbindKeys();
    }
    setActiveTab(tabName) {
        const tabs = this.visorComponent.state.tabs;
        if (!tabs.has(tabName)) {
            throw new Error(`Tab '${tabName}' does not exist`);
        }
        this.visorComponent.setState({ activeTab: tabName });
    }
}
exports.Visor = Visor;
//# sourceMappingURL=visor.js.map