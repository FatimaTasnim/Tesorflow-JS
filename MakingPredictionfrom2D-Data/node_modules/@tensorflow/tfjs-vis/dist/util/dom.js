"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const glamor_1 = require("glamor");
const glamor_tachyons_1 = require("glamor-tachyons");
const render_utils_1 = require("../render/render_utils");
const DEFAULT_SUBSURFACE_OPTS = {
    prepend: false,
};
function subSurface(parent, name, opts = {}) {
    const container = render_utils_1.getDrawArea(parent);
    const style = glamor_1.css(Object.assign({ '& canvas': {
            display: 'block',
        } }, glamor_tachyons_1.tachyons('mv2')));
    const titleStyle = glamor_1.css(Object.assign({ backgroundColor: 'white', display: 'inline-block', boxSizing: 'border-box', borderBottom: '1px solid #357EDD', lineHeight: '2em', padding: '0 10px 0 10px', marginBottom: '20px' }, glamor_tachyons_1.tachyons('fw6 tl')));
    const options = Object.assign({}, DEFAULT_SUBSURFACE_OPTS, opts);
    let sub = container.querySelector(`div[data-name=${name}]`);
    if (!sub) {
        sub = document.createElement('div');
        sub.setAttribute('class', `${style}`);
        sub.dataset.name = name;
        if (options.title) {
            const title = document.createElement('div');
            title.setAttribute('class', `subsurface-title ${titleStyle}`);
            title.innerText = options.title;
            sub.appendChild(title);
        }
        if (options.prepend) {
            container.insertBefore(sub, container.firstChild);
        }
        else {
            container.appendChild(sub);
        }
    }
    return sub;
}
exports.subSurface = subSurface;
//# sourceMappingURL=dom.js.map