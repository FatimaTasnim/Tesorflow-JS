{"version":3,"file":"confusion_matrix.js","sourceRoot":"","sources":["../../src/render/confusion_matrix.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport embed, {Mode, VisualizationSpec} from 'vega-embed';\n\nimport {ConfusionMatrixData, ConfusionMatrixOptions, Drawable,} from '../types';\n\nimport {getDrawArea} from './render_utils';\n\n/**\n * Renders a confusion matrix.\n *\n * Can optionally exclude the diagonal from being shaded if one wants the visual\n * focus to be on the incorrect classifications. Note that if the classification\n * is perfect (i.e. only the diagonal has values) then the diagonal will always\n * be shaded.\n *\n * ```js\n * const rows = 5;\n * const cols = 5;\n * const values = [];\n * for (let i = 0; i < rows; i++) {\n *   const row = []\n *   for (let j = 0; j < cols; j++) {\n *     row.push(Math.round(Math.random() * 50));\n *   }\n *   values.push(row);\n * }\n * const data = { values };\n *\n * // Render to visor\n * const surface = { name: 'Confusion Matrix', tab: 'Charts' };\n * tfvis.render.confusionMatrix(surface, data);\n * ```\n *\n * ```js\n * // The diagonal can be excluded from shading.\n *\n * const data = {\n *   values: [[4, 2, 8], [1, 7, 2], [3, 3, 20]],\n * }\n *\n * // Render to visor\n * const surface = {\n *  name: 'Confusion Matrix with Excluded Diagonal', tab: 'Charts'\n * };\n *\n * tfvis.render.confusionMatrix(surface, data, {\n *   shadeDiagonal: false\n * });\n * ```\n */\n/** @doc {heading: 'Charts', namespace: 'render'} */\nexport async function confusionMatrix(\n    container: Drawable, data: ConfusionMatrixData,\n    opts: ConfusionMatrixOptions = {}): Promise<void> {\n  const options = Object.assign({}, defaultOpts, opts);\n  const drawArea = getDrawArea(container);\n\n  // Format data for vega spec; an array of objects, one for for each cell\n  // in the matrix.\n  const values: MatrixEntry[] = [];\n\n  const inputArray = data.values;\n  const tickLabels = data.tickLabels || [];\n  const generateLabels = tickLabels.length === 0;\n\n  let nonDiagonalIsAllZeroes = true;\n  for (let i = 0; i < inputArray.length; i++) {\n    const label = generateLabels ? `Class ${i}` : tickLabels[i];\n\n    if (generateLabels) {\n      tickLabels.push(label);\n    }\n\n    for (let j = 0; j < inputArray[i].length; j++) {\n      const prediction = generateLabels ? `Class ${j}` : tickLabels[j];\n\n      const count = inputArray[i][j];\n      if (i === j && !options.shadeDiagonal) {\n        values.push({\n          label,\n          prediction,\n          diagCount: count,\n          noFill: true,\n        });\n      } else {\n        values.push({\n          label,\n          prediction,\n          count,\n        });\n        // When not shading the diagonal we want to check if there is a non\n        // zero value. If all values are zero we will not color them as the\n        // scale will be invalid.\n        if (count !== 0) {\n          nonDiagonalIsAllZeroes = false;\n        }\n      }\n    }\n  }\n\n  if (!options.shadeDiagonal && nonDiagonalIsAllZeroes) {\n    // User has specified requested not to shade the diagonal but all the other\n    // values are zero. We have two choices, don't shade the anything or only\n    // shade the diagonal. We choose to shade the diagonal as that is likely\n    // more helpful even if it is not what the user specified.\n    for (const val of values) {\n      if (val.noFill === true) {\n        val.noFill = false;\n        val.count = val.diagCount;\n      }\n    }\n  }\n\n  const embedOpts = {\n    actions: false,\n    mode: 'vega-lite' as Mode,\n    defaultStyle: false,\n  };\n\n  const spec: VisualizationSpec = {\n    'width': options.width || drawArea.clientWidth,\n    'height': options.height || drawArea.clientHeight,\n    'padding': 0,\n    'autosize': {\n      'type': 'fit',\n      'contains': 'padding',\n      'resize': true,\n    },\n    'config': {\n      'axis': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      },\n      'text': {'fontSize': options.fontSize},\n      'legend': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      }\n    },\n    'data': {'values': values},\n    'encoding': {\n      'x': {\n        'field': 'prediction',\n        'type': 'ordinal',\n        // Maintain sort order of the axis if labels is passed in\n        'scale': {'domain': tickLabels},\n      },\n      'y': {\n        'field': 'label',\n        'type': 'ordinal',\n        // Maintain sort order of the axis if labels is passed in\n        'scale': {'domain': tickLabels},\n      },\n    },\n    'layer': [\n      {\n        // The matrix\n        'mark': {\n          'type': 'rect',\n        },\n        'encoding': {\n          'fill': {\n            'condition': {\n              'test': 'datum[\"noFill\"] == true',\n              'value': 'white',\n            },\n            'field': 'count',\n            'type': 'quantitative',\n            'scale': {'range': ['#f7fbff', '#4292c6']},\n          },\n          'tooltip': {\n            'condition': {\n              'test': 'datum[\"noFill\"] == true',\n              'field': 'diagCount',\n              'type': 'nominal',\n            },\n            'field': 'count',\n            'type': 'nominal',\n          }\n        },\n\n      },\n    ]\n  };\n\n  if (options.showTextOverlay) {\n    spec.layer.push({\n      // The text labels\n      'mark': {'type': 'text', 'baseline': 'middle'},\n      'encoding': {\n        'text': {\n          'condition': {\n            'test': 'datum[\"noFill\"] == true',\n            'field': 'diagCount',\n            'type': 'nominal',\n          },\n          'field': 'count',\n          'type': 'nominal',\n        },\n      }\n    });\n  }\n\n  await embed(drawArea, spec, embedOpts);\n  return Promise.resolve();\n}\n\nconst defaultOpts = {\n  xLabel: null,\n  yLabel: null,\n  xType: 'nominal',\n  yType: 'nominal',\n  shadeDiagonal: true,\n  fontSize: 12,\n  showTextOverlay: true,\n  height: 400,\n};\n\ninterface MatrixEntry {\n  label: string;\n  prediction: string;\n  count?: number;\n  diagCount?: number;\n  noFill?: boolean;\n}\n"]}