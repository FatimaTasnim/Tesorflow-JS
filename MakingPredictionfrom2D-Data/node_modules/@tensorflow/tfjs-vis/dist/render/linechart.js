"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vega_embed_1 = __importDefault(require("vega-embed"));
const render_utils_1 = require("./render_utils");
function linechart(container, data, opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        let inputArray = data.values;
        const _series = data.series == null ? [] : data.series;
        inputArray = Array.isArray(inputArray[0]) ? inputArray :
            [inputArray];
        const values = [];
        const seriesNames = new Set();
        inputArray.forEach((seriesData, i) => {
            const seriesName = _series[i] != null ? _series[i] : `Series ${i + 1}`;
            seriesNames.add(seriesName);
            const seriesVals = seriesData.map(v => Object.assign({}, v, { series: seriesName }));
            values.push(...seriesVals);
        });
        const drawArea = render_utils_1.getDrawArea(container);
        const options = Object.assign({}, defaultOpts, opts);
        const embedOpts = {
            actions: false,
            mode: 'vega-lite',
            defaultStyle: false,
        };
        const yScale = () => {
            if (options.zoomToFit) {
                return { 'zero': false };
            }
            else if (options.yAxisDomain != null) {
                return { 'domain': options.yAxisDomain };
            }
            return undefined;
        };
        const encodings = {
            'x': {
                'field': 'x',
                'type': options.xType,
                'title': options.xLabel,
            },
            'y': {
                'field': 'y',
                'type': options.yType,
                'title': options.yLabel,
                'scale': yScale(),
            },
            'color': {
                'field': 'series',
                'type': 'nominal',
                'legend': { 'values': Array.from(seriesNames) }
            },
        };
        let domainFilter;
        if (options.yAxisDomain != null) {
            domainFilter = { 'filter': { 'field': 'y', 'range': options.yAxisDomain } };
        }
        const spec = {
            'width': options.width || drawArea.clientWidth,
            'height': options.height || drawArea.clientHeight,
            'padding': 0,
            'autosize': {
                'type': 'fit',
                'contains': 'padding',
                'resize': true,
            },
            'config': {
                'axis': {
                    'labelFontSize': options.fontSize,
                    'titleFontSize': options.fontSize,
                },
                'text': { 'fontSize': options.fontSize },
                'legend': {
                    'labelFontSize': options.fontSize,
                    'titleFontSize': options.fontSize,
                }
            },
            'data': { 'values': values },
            'layer': [
                {
                    'mark': {
                        'type': 'line',
                        'clip': true,
                    },
                    'encoding': encodings,
                },
                {
                    'mark': { 'type': 'point' },
                    'transform': options.yAxisDomain ? [domainFilter] : undefined,
                    'selection': {
                        'nearestPoint': {
                            'type': 'single',
                            'on': 'mouseover',
                            'nearest': true,
                            'empty': 'none',
                            'encodings': ['x'],
                        },
                    },
                    'encoding': Object.assign({}, encodings, {
                        'opacity': {
                            'value': 0,
                            'condition': {
                                'selection': 'nearestPoint',
                                'value': 1,
                            },
                        }
                    }),
                },
                {
                    'transform': [
                        { 'filter': { 'selection': 'nearestPoint' } },
                        domainFilter
                    ].filter(Boolean),
                    'mark': {
                        'type': 'text',
                        'align': 'left',
                        'dx': 5,
                        'dy': -5,
                        'color': 'black',
                    },
                    'encoding': Object.assign({}, encodings, {
                        'text': {
                            'type': options.xType,
                            'field': 'y',
                            'format': '.6f',
                        },
                        'color': undefined,
                    }),
                },
                {
                    'transform': [{ 'filter': { 'selection': 'nearestPoint' } }],
                    'mark': { 'type': 'rule', 'color': 'gray' },
                    'encoding': {
                        'x': {
                            'type': options.xType,
                            'field': 'x',
                        }
                    }
                },
            ],
        };
        yield vega_embed_1.default(drawArea, spec, embedOpts);
        return Promise.resolve();
    });
}
exports.linechart = linechart;
const defaultOpts = {
    xLabel: 'x',
    yLabel: 'y',
    xType: 'quantitative',
    yType: 'quantitative',
    zoomToFit: false,
    fontSize: 11,
};
//# sourceMappingURL=linechart.js.map