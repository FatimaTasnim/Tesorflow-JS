"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vega_embed_1 = __importDefault(require("vega-embed"));
const render_utils_1 = require("./render_utils");
function barchart(container, data, opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const drawArea = render_utils_1.getDrawArea(container);
        const values = data;
        const options = Object.assign({}, defaultOpts, opts);
        if (instances.has(drawArea)) {
            const instanceInfo = instances.get(drawArea);
            if (render_utils_1.shallowEquals(options, instanceInfo.lastOptions)) {
                yield render_utils_1.nextFrame();
                const view = instanceInfo.view;
                const changes = view.changeset().remove(() => true).insert(values);
                yield view.change('values', changes).runAsync();
                return;
            }
        }
        const { xLabel, yLabel, xType, yType } = options;
        let xAxis = null;
        if (xLabel != null) {
            xAxis = { title: xLabel };
        }
        let yAxis = null;
        if (yLabel != null) {
            yAxis = { title: yLabel };
        }
        const embedOpts = {
            actions: false,
            mode: 'vega-lite',
            defaultStyle: false,
        };
        const spec = {
            'width': options.width || drawArea.clientWidth,
            'height': options.height || drawArea.clientHeight,
            'padding': 0,
            'autosize': {
                'type': 'fit',
                'contains': 'padding',
                'resize': true,
            },
            'config': {
                'axis': {
                    'labelFontSize': options.fontSize,
                    'titleFontSize': options.fontSize,
                },
                'text': { 'fontSize': options.fontSize },
                'legend': {
                    'labelFontSize': options.fontSize,
                    'titleFontSize': options.fontSize,
                }
            },
            'data': { 'values': values, 'name': 'values' },
            'mark': 'bar',
            'encoding': {
                'x': { 'field': 'index', 'type': xType, 'axis': xAxis },
                'y': { 'field': 'value', 'type': yType, 'axis': yAxis }
            }
        };
        yield render_utils_1.nextFrame();
        const embedRes = yield vega_embed_1.default(drawArea, spec, embedOpts);
        instances.set(drawArea, {
            view: embedRes.view,
            lastOptions: options,
        });
    });
}
exports.barchart = barchart;
const defaultOpts = {
    xLabel: '',
    yLabel: '',
    xType: 'ordinal',
    yType: 'quantitative',
    fontSize: 11,
};
const instances = new Map();
//# sourceMappingURL=barchart.js.map