"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const d3_format_1 = require("d3-format");
const d3_selection_1 = require("d3-selection");
const glamor_1 = require("glamor");
const glamor_tachyons_1 = require("glamor-tachyons");
const render_utils_1 = require("./render_utils");
function table(container, data, opts = {}) {
    if (data && data.headers == null) {
        throw new Error('Data to render must have a "headers" property');
    }
    if (data && data.values == null) {
        throw new Error('Data to render must have a "values" property');
    }
    const drawArea = render_utils_1.getDrawArea(container);
    const options = Object.assign({}, defaultOpts, opts);
    let table = d3_selection_1.select(drawArea).select('table.tf-table');
    const tableStyle = glamor_1.css(Object.assign({}, glamor_tachyons_1.tachyons('f6 w-100 mw8 center'), { fontSize: options.fontSize }));
    if (table.size() === 0) {
        table = d3_selection_1.select(drawArea).append('table');
        table.attr('class', ` ${tableStyle} tf-table`);
        table.append('thead').append('tr');
        table.append('tbody');
    }
    if (table.size() !== 1) {
        throw new Error('Error inserting table');
    }
    const headerRowStyle = glamor_1.css(Object.assign({}, glamor_tachyons_1.tachyons('fw6 bb b--black-20 tl pb3 pr3 bg-white')));
    const headers = table.select('thead').select('tr').selectAll('th').data(data.headers);
    const headersEnter = headers.enter().append('th').attr('class', `${headerRowStyle}`);
    headers.merge(headersEnter).html(d => d);
    headers.exit().remove();
    const format = d3_format_1.format(',.4~f');
    const rows = table.select('tbody').selectAll('tr').data(data.values);
    const rowsEnter = rows.enter().append('tr');
    const cellStyle = glamor_1.css(Object.assign({}, glamor_tachyons_1.tachyons('pa1 bb b--black-20')));
    const cells = rows.merge(rowsEnter).selectAll('td').data(d => d);
    const cellsEnter = cells.enter().append('td').attr('class', `${cellStyle}`);
    cells.merge(cellsEnter).html(d => typeof d === 'number' ? format(d) : d);
    cells.exit().remove();
    rows.exit().remove();
}
exports.table = table;
const defaultOpts = {
    fontSize: 14,
};
//# sourceMappingURL=table.js.map